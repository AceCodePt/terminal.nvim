*terminal-nvim.txt*                                The Neovim Terminal Manager

==============================================================================
Table of Contents                            *terminal-nvim-table-of-contents*

1. Terminal.nvim                                 |terminal-nvim-terminal.nvim|
  - Installation                    |terminal-nvim-terminal.nvim-installation|
  - Config                                |terminal-nvim-terminal.nvim-config|
  - Functions                          |terminal-nvim-terminal.nvim-functions|
  - Keymaps                              |terminal-nvim-terminal.nvim-keymaps|
  - Commands                            |terminal-nvim-terminal.nvim-commands|
  - Terminal objects            |terminal-nvim-terminal.nvim-terminal-objects|
  - Tips                                    |terminal-nvim-terminal.nvim-tips|
  - Donate                                |terminal-nvim-terminal.nvim-donate|

==============================================================================
1. Terminal.nvim                                 *terminal-nvim-terminal.nvim*


INSTALLATION                        *terminal-nvim-terminal.nvim-installation*

>lua
    use({
        'rebelot/terminal.nvim',
        config = function()
            require("terminal").setup()
        end
    })
<

------------------------------------------------------------------------------

CONFIG                                    *terminal-nvim-terminal.nvim-config*

Default config

>lua
    {
        layout = { open_cmd = "botright new" },
        cmd = { vim.o.shell },
        autoclose = false,
    }
<


CONFIG.LAYOUT

Specify the layout of the terminal window.

Type: `table`

Default: `{ open_cmd = "botright new" }`


CONFIG.LAYOUT.OPEN_CMD:

Vim command used to create the new buffer and window.


FLOAT LAYOUT:

When `open_cmd = "float"`, `layout.height` and `layout.width` are used to
determine the height (lines) and width (columns) of the floating window. Values
`<= 1` are interpreted as percentage of screen space.


CONFIG.CMD

Default command for new terminals

Type: `table|string` passed to `termopen` (`:h jobstart()`)

Default: `{ vim.o.shell }`


CONFIG.AUTOCLOSE

Automatically close terminal window when the process exits (on `TermClose`).

Type: `bool`

Default: `false`

------------------------------------------------------------------------------

FUNCTIONS                              *terminal-nvim-terminal.nvim-functions*


SETUP()

`setup(config)`

Params:


- `config` (`table`): user configuration

Set up the plugin with user `config`. A call to this function is always
required.


SET_TARGET()

`set_target(index)`

Params:


- `index` (`integer`): Terminal index.

Set the `index` terminal as the target for other actions.


CYCLE()

`cycle(step)`

Params:


- `step` (`integer`): Increment number for cycling.

Cycle between active terminals.


RUN()

`run(cmd?, opts?)`

Params:


- `cmd` (`table|string`): command to be executed by the terminal.
- `opts` (`table`): options to be passed to `termopen`

Run a command in terminal with given options. If no command is provided, user
will be prompted to insert one; If `cmd` is an empty string, `config.cmd` will
be used.


OPEN()

`open(index, layout, force)`

Params:


- `index`(`integer`): terminal index
- `layout` (`table`): layout spec
- `force` (`bool`): Force opening the terminal window even if it already visible in the current tab.

Open a terminal with given layout.


CLOSE()

`close(index)`

Params:


- `index`(`integer`): terminal index

Close a terminal window.


KILL()

`kill(index)`

Params:


- `index`(`integer`): terminal index

Kill a terminal job and close its window.


TOGGLE()

`toggle(index, layout, force)`

Params:


- `index`(`integer`): terminal index
- `layout` (`table`): layout spec
- `force` (`bool`): Force opening the terminal window even if it already visible in the current tab.

Open a terminal with given layout, or close its window if it’s visible in the
current tab (unless `force` is `true`).


SEND()

`send(index, data)`

Params:


- `index`(`integer`): terminal index
- `data` (`table|string`): Text to be sent to the terminal via `chansend()`


CURRENT_TERM_INDEX()

`current_term_index()`

Get the index of the terminal in the current window.


CURRENT_TERM()

`get_current_term()`

Get the terminal object displayed in the current window.


MOVE()

`move(index, layout)`

Change the layout of the selected terminal, permanently.

------------------------------------------------------------------------------

KEYMAPS                                  *terminal-nvim-terminal.nvim-keymaps*

Keymaps can be set up using the API defined in `terminal.mappings.` When called
with arguments, each keymap API function returns a pre-loaded function with
given arguments. Otherwise, the corresponding terminal function will be called
with default arguments. All keymap functions support a count by default, so
that, for instance, `2<leader>to` will toggle the terminal with index #2.


EXAMPLE MAPPINGS

>lua
    local term_map = require("terminal.mappings")
    vim.keymap.set({ "n", "x" }, "<leader>ts", term_map.operator_send, { expr = true })
    vim.keymap.set("n", "<leader>to", term_map.toggle)
    vim.keymap.set("n", "<leader>tO", term_map.toggle({ open_cmd = "enew" }))
    vim.keymap.set("n", "<leader>tr", term_map.run)
    vim.keymap.set("n", "<leader>tR", term_map.run(nil, { layout = { open_cmd = "enew" } }))
    vim.keymap.set("n", "<leader>tk", term_map.kill)
    vim.keymap.set("n", "<leader>t]", term_map.cycle_next)
    vim.keymap.set("n", "<leader>t[", term_map.cycle_prev)
    vim.keymap.set("n", "<leader>tl", term_map.move({ open_cmd = "belowright vnew" }))
    vim.keymap.set("n", "<leader>tL", term_map.move({ open_cmd = "botright vnew" }))
    vim.keymap.set("n", "<leader>th", term_map.move({ open_cmd = "belowright new" }))
    vim.keymap.set("n", "<leader>tH", term_map.move({ open_cmd = "botright new" }))
    vim.keymap.set("n", "<leader>tf", term_map.move({ open_cmd = "float" }))
<

------------------------------------------------------------------------------

COMMANDS                                *terminal-nvim-terminal.nvim-commands*


TERMRUN

:TermRun[!] [command]

Run [command] in terminal. If command is empty, user will be prompted to enter
one, falling back to `config.cmd`. With [!] the new terminal window will
replace the current buffer. Accepts `split` and `vertical` modifiers to set the
new terminal layout `open_cmd`. (eg: `botright vertical TermRun ipython`)


TERMOPEN

:[count]TermOpen[!] [open_cmd]

Open terminal with [count] index and layout specified by [open_cmd]. With [!],
a new window will be created even if the terminal is already displayed in the
current tab, otherwise the terminal will be focused. Also accepts `split` and
`vertical` modifiers to specify `open_cmd`.


TERMCLOSE

:[count]TermClose

Close terminal with [count] index.


TERMTOGGLE

:[count]TermToggle[!] [open_cmd]

Toggle terminal with [count] index and layout specified by [open_cmd]. With
[!], a new window will be created even if the terminal is already displayed in
the current tab. Also accepts `split` and `vertical` modifiers to specify
`open_cmd`.


TERMKILL

:[count]TermKill

Kill terminal with [count] index.


TERMSEND

:[count]TermSend [text]

Send [text] to terminal with [count] index.


TERMSETTARGET

:[count]TermSetTarget

Set terminal with [count] index as target for terminal actions.

------------------------------------------------------------------------------

TERMINAL OBJECTS                *terminal-nvim-terminal.nvim-terminal-objects*


TERMINAL:NEW()

`terminal:new(opts)`

Params:


- `opts` (`table`):
    - layout (`table`): layout spec
    - cmd (`table|string`): command to be executed by the terminal
    - autoclose (`bool`): automatically close terminal window when the process exits
    - cwd (`string|function->string|nil`): CWD of the terminal job.
    - Other fields passed to `jobstart`:
        - clear_env
        - env
        - on_exit
        - on_stdout
        - on_stderr


TERMINAL:OPEN()

`terminal:open(layout, force)`

Params:


- `layout` (`table`): layout spec
- `force` (`bool`): Force opening the terminal window even if it already visible in the current tab.

Open the terminal with given layout.


TERMINAL:CLOSE()

`terminal:close()`

Close the terminal window in the current tab.


TERMINAL:TOGGLE()

`terminal:toggle(layout, force)`

Params:


- `layout` (`table`): layout spec
- `force` (`bool`): Force opening the terminal window even if it already visible in the current tab.

Open the terminal with given layout, or close its window if it’s visible in
the current tab (unless `force` is `true`).


TERMINAL:KILL()

`terminal:kill()`

Kill a terminal job and close its window.


TERMINAL:SEND()

`terminal:send(data)`

Params:


- `data` (`table|string`): Text to be sent to the terminal via `chansend()`

Send text to terminal.


NAMED TERMINALS ~


IPYTHON:

>lua
    local ipython = require("terminal").terminal:new({
        layout = { open_cmd = "botright vertical new" },
        cmd = { "ipython" },
        autoclose = true,
    })
    
    vim.api.nvim_create_user_command("IPython", function()
        ipython:toggle(nil, true)
        local bufnr = vim.api.nvim_get_current_buf()
        vim.keymap.set(
            "x",
            "<leader>ts",
            function()
                vim.api.nvim_feedkeys('"+y', 'n', false)
                ipython:send("%paste")
            end,
            { buffer = bufnr }
        )
        vim.keymap.set("n", "<leader>t?", function()
            ipython:send(vim.fn.expand("<cexpr>") .. "?")
        end, { buffer = bufnr })
    end, {})
<


LAZYGIT:

>lua
    local lazygit = require("terminal").terminal:new({
        layout = { open_cmd = "float", height = 0.9, width = 0.9 },
        cmd = { "lazygit" },
        autoclose = true,
    })
    vim.env["GIT_EDITOR"] = "nvr -cc close -cc split --remote-wait +'set bufhidden=wipe'"
    vim.api.nvim_create_user_command("Lazygit", function(args)
        lazygit.cwd = args.args and vim.fn.expand(args.args)
        lazygit:toggle(nil, true)
    end, { nargs = "?" })
<


HTOP:

>lua
    local htop = require("terminal").terminal:new({
        layout = { open_cmd = "float" },
        cmd = { "htop" },
        autoclose = true,
    })
    vim.api.nvim_create_user_command("Htop", function()
        htop:toggle(nil, true)
    end, { nargs = "?" })
<

------------------------------------------------------------------------------

TIPS                                        *terminal-nvim-terminal.nvim-tips*


USEFUL TERMINAL MAPPINGS

>vim
    tnoremap <c-\><c-\> <c-\><c-n>
    tnoremap <c-h> <c-\><c-n><c-w>h
    tnoremap <c-j> <c-\><c-n><c-w>j
    tnoremap <c-k> <c-\><c-n><c-w>k
    tnoremap <c-l> <c-\><c-n><c-w>l
<


AUTO INSERT MODE

>lua
    vim.api.nvim_create_autocmd({ "WinEnter", "BufWinEnter", "TermOpen" }, {
        callback = function(args)
            if vim.startswith(vim.api.nvim_buf_get_name(args.buf), "term://") then
                vim.cmd("startinsert")
            end
        end,
    })
<


TERMINAL WINDOW HIGHLIGHT

>lua
    vim.api.nvim_create_autocmd("TermOpen", {
        command = [[setlocal nonumber norelativenumber winhl=Normal:NormalFloat]]
    })
<


STATUSLINE INTEGRATION

Use `terminal.current_term_index()` to get the current terminal index and
display it within the statusline.


DONATE                                    *terminal-nvim-terminal.nvim-donate*

Buy me coffee and support my work ;)


<https://www.paypal.com/donate/?business=VNQPHGW4JEM3S&no_recurring=0&item_name=Buy+me+coffee+and+support+my+work+%3B%29&currency_code=EUR>

==============================================================================
2. Links                                                 *terminal-nvim-links*

1. *Donate*: https://img.shields.io/badge/Donate-PayPal-green.svg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
