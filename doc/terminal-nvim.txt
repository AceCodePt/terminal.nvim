*terminal-nvim.txt*                                The Neovim Terminal Manager

==============================================================================
Table of Contents                            *terminal-nvim-table-of-contents*

1. Terminal.nvim                                 |terminal-nvim-terminal.nvim|
  - Installation                                  |terminal-nvim-installation|
  - Config                                              |terminal-nvim-config|
  - Functions                                        |terminal-nvim-functions|
  - Commands                                          |terminal-nvim-commands|
  - Named Terminals                            |terminal-nvim-named-terminals|
  - Donate                                              |terminal-nvim-donate|

==============================================================================
1. Terminal.nvim                                 *terminal-nvim-terminal.nvim*

INSTALLATION                                      *terminal-nvim-installation*

>
    use({
        'rebelot/terminal.nvim',
        config = function()
            require("terminal").setup()
        end
    })
<


CONFIG                                                  *terminal-nvim-config*

Default config

>
    {
        layout = { open_cmd = "botright new" },
        cmd = { vim.o.shell },
        autoclose = false,
    }
<


CONFIG.LAYOUT ~

Specify the layout of the terminal window.

Type: `table`

Default: `{ open_cmd = "botright new"}`

`layout.open_cmd`:

Vim command used to create the new buffer and window.

Float Layout: When `open_cmd = "float"`, `layout.height` and `layout.width` are
used to determine the height and width of the floating window. Values `<= 1`
are interpreted as percentage of screen space.

CONFIG.CMD ~

Default command for new terminals

Type: `table|string` passed to `termopen` (`:h jobstart()`)

Default: `{ vim.o.shell }`

CONFIG.AUTOCLOSE ~

Automatically close terminal window when the process exits (on `TermClose`).

Type: `bool`

Default: `false`

FUNCTIONS                                            *terminal-nvim-functions*

SETUP() ~

Signature: `setup(config)`

params:


- `config` (`table`): user configuration


Set up the plugin with user `config`. A call to this function is always
required.

SET_TARGET() ~

Signature: `set_target(index)`

Set the `index` terminal as the target for other actions.

params:


- `index` (`integer`): Terminal index.


CYCLE() ~

Signature: `cycle(step)`

params:

-`step` (`integer`): Increment number for cycling.

Cycle between active terminals.

RUN() ~

Signature: `run(cmd?, opts?)`

params:


- `cmd` (`table|string`): command to be executed by the terminal.
- `opts` (`table`): options to be passed to `termopen`


Run a command in terminal with given options. If no command is provided, user
will be prompted to insert one; If `cmd` is an empty string, `config.cmd` will
be used.

OPEN() ~

Signature: `open(index, layout, force)`

params:

-`index`(`integer`): terminal index -`layout` (`table`): layout spec -`force`
(`bool`): Force opening the terminal window even if it already visible in the
current tab.

Open a terminal with given layout.

CLOSE() ~

Signature: `close(index)`

params:


- `index`(`integer`): terminal index


Close a terminal window.

KILL() ~

Signature: `kill(index)`

params:


- `index`(`integer`): terminal index


Kill a terminal job and close its window.

TOGGLE() ~

Signature: `toggle(index, layout, force)`

params:


- `index`(`integer`): terminal index
- `layout` (`table`): layout spec
- `force` (`bool`): Force opening the terminal window even if it already visible in the current tab.


Open a terminal with given layout, or close its window if itâ€™s visible in the
current tab (unless `force` is `true`).

SEND() ~

Signature: `send(index, data)`

params:


- `index`(`integer`): terminal index
- `data` (`table|string`): Text to be sent to the terminal via `chansend()`


COMMANDS                                              *terminal-nvim-commands*

TERMRUN ~

:TermRun[!] [command]

Run [command] in terminal. If command is empty, user will be prompted to enter
one, falling back to `config.cmd`. With [!] the new terminal window will
replace the current buffer.

TERMOPEN ~

:TermOpen[!] [count]

Open terminal with [count] index. With [!], a new window will be created even
if the terminal is already displayed in the current tab.

TERMCLOSE ~

TERMTOGGLE ~

TERMKILL ~

TERMSEND ~

TERMSETTARGET ~

NAMED TERMINALS                                *terminal-nvim-named-terminals*

DONATE                                                  *terminal-nvim-donate*

Buy me coffee and support my work ;)

<img src='https://img.shields.io/badge/Donate-PayPal-green.svg' title=''/>
<https://www.paypal.com/donate/?business=VNQPHGW4JEM3S&no_recurring=0&item_name=Buy+me+coffee+and+support+my+work+%3B%29&currency_code=EUR>

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
